{/* <TableContainer className="table-container">
      <Table className='table'>
        <TableHead className='table-head'>
          <TableRow className='table-row'>
            <TableCell>Patient Details</TableCell>
            <TableCell>Patient ID</TableCell>
            <TableCell>Contact</TableCell>
            <TableCell>Visit Type</TableCell>
            <TableCell>Slot</TableCell>
            <TableCell>Payment Status</TableCell>
            <TableCell>Status / Actions</TableCell>
          </TableRow>
        </TableHead>
        <TableBody>
          {sampleData.map((row, index) => (
            <TableRow key={index}>
              <TableCell>
                <Typography variant="subtitle2" className="patient-name">
                  {row.name}, {row.gender}, {row.age}y
                </Typography>
                <Typography variant="body2" className="last-visit">
                  Last Visit: {row.lastVisit}
                </Typography>
              </TableCell>
              <TableCell>{row.patientId}</TableCell>
              <TableCell>{row.contact}</TableCell>
              <TableCell>
                <Typography className="visit-type">
                  <span className="visit-icon">üö∂‚Äç‚ôÇÔ∏è</span> {row.visitType}
                </Typography>
              </TableCell>
              <TableCell>
                <Typography className="slot-time">{row.slotTime}</Typography>
                <Typography className="slot-date">{row.slotDate}</Typography>
              </TableCell>
              <TableCell>{row.paymentStatus}</TableCell>
              <TableCell>
                <Button
                  variant="text"
                  startIcon={<ArrowForwardIcon />}
                  className="start-visit-btn"
                >
                  Start Visit
                </Button>
                <IconButton className="action-menu">
                  <MoreVertIcon />
                </IconButton>
              </TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
    </TableContainer> */}





NotesEditor code--

// import React, { useState,  useRef   } from "react";
// import {
//   Box,
//   Button,
//   ButtonGroup,
//   IconButton,
//   TextField,
//   Checkbox,
//   FormControlLabel
// } from "@mui/material";
// import {
//   FormatBold,
//   FormatItalic,
//   FormatListBulleted,
//   ArrowDropDown,
//   Fullscreen,
// } from "@mui/icons-material";
// import '../Style/_noteseditor.scss';

// const NotesEditor = () => {

//   const editorRef = useRef(null);

//     // Apply formatting to the selected text
//     const applyFormat = (command) => {
//       document.execCommand(command, false, null);
//       editorRef.current.focus();
//     };

//   // const [text, setText] = useState("");
//   // const [isBold, setIsBold] = useState(false);
//   // const [isItalic, setIsItalic] = useState(false);

//   // const handleBold = () => setIsBold(!isBold);
//   // const handleItalic = () => setIsItalic(!isItalic);

//   // const handleTextChange = (event) => setText(event.target.value);

//   return (
//     <Box className="notes-editor">
//       <Box className="toolbar">
//         <ButtonGroup variant="none">
//           <Button
//             onClick={() => applyFormat("bold")}
//             // className={isBold ? "active" : ""}
//             style={{color:"black"}}
//           >
//             <FormatBold />
//           </Button>
//           <Button
//          onClick={() => applyFormat("italic")}
//             // className={isItalic ? "active" : ""}
//             style={{color:"black"}}
//           >
//             <FormatItalic style={{color:"black"}} />
//           </Button>
//           <Button
//            onClick={() => applyFormat("insertUnorderedList")}
//           >
//             <FormatListBulleted style={{color:"black"}} />
//           </Button>
//           <Button>
//             <ArrowDropDown style={{color:"black"}}/>
//           </Button>
//         </ButtonGroup>
//         <IconButton>
//           <Fullscreen />
//         </IconButton>
//       </Box>
//       {/* <TextField
//         inputRef={editorRef}
//        contentEditable
//         multiline
//         rows={6}
//         fullWidth
//         variant="outlined"
//         placeholder="Enter your notes here..."
//         value={text}
//         // onChange={handleTextChange}
//         InputProps={{
//           // style: {
//           //   fontWeight: isBold ? "bold" : "normal",
//           //   fontStyle: isItalic ? "italic" : "normal",
//           // },
//         }}
//       /> */}
//        <TextField
//         inputRef={editorRef}
//         variant="outlined"
//         multiline
//         fullWidth
//         className="editor"
//         placeholder="Enter your notes here..."
//         InputProps={{
//           inputProps: {
//             contentEditable: true, // Enables rich text editing
//             suppressContentEditableWarning: true, // Suppresses React warnings for contentEditable
//           },
//         }}
//       />
//       <div className="advices-action">
//                   <FormControlLabel
//                     control={<Checkbox />}
//                     label="Advised Home isolation and treatment as of now."
//                   />
//                    <FormControlLabel
//                     control={<Checkbox />}
//                     label="Streaming gargling"
//                   />
//                    <FormControlLabel
//                     control={<Checkbox />}
//                     label="Dr WhatsApp number +91 9771221270"
//                   />
//                 </div>
//     </Box>
//   );
// };

// export default NotesEditor;

TableComponent--

// const sampleData = [
  //   {
  //     name: 'Wade Warren',
  //     gender: 'M',
  //     age: 30,
  //     lastVisit: '10 Dec 2024',
  //     patientId: 2116,
  //     contact: '+91 9771844566',
  //     visitType: 'consultation',
  //     slotTime: '05:00 PM',
  //     slotDate: '12 Dec 2024',
  //     paymentStatus: '---',
  //   },
  //   {
  //     name: 'Wade Warren',
  //     gender: 'M',
  //     age: 30,
  //     lastVisit: '10 Dec 2024',
  //     patientId: 2116,
  //     contact: '+91 9771844566',
  //     visitType: 'consultation',
  //     slotTime: '05:00 PM',
  //     slotDate: '12 Dec 2024',
  //     paymentStatus: '---',
  //   },
  //   {
  //     name: 'Wade Warren',
  //     gender: 'M',
  //     age: 30,
  //     lastVisit: '10 Dec 2024',
  //     patientId: 2116,
  //     contact: '+91 9771844566',
  //     visitType: 'consultation',
  //     slotTime: '05:00 PM',
  //     slotDate: '12 Dec 2024',
  //     paymentStatus: '---',
  //   },
  // ];

  // const columns = [
  //   { field: "id", headerName: "ID", width: 100 },
  //   { field: "name", headerName: "Name", width: 200 },
  //   { field: "age", headerName: "Age", width: 100 },
  //   { field: "email", headerName: "Email", width: 250 },
  // ];

  // const rows = [
  //   { id: 1, name: "John Doe", age: 25, email: "john.doe@example.com" },
  //   { id: 2, name: "Jane Smith", age: 30, email: "jane.smith@example.com" },
  //   { id: 3, name: "Alice Brown", age: 35, email: "alice.brown@example.com" },
  //   { id: 4, name: "Bob White", age: 28, email: "bob.white@example.com" },
  // ];

  
      {/* <div className="reusable-table">
      <DataGrid
        rows={rows}
        columns={columns}
        pageSize={pageSize}
        rowsPerPageOptions={[5, 10, 20]}
        checkboxSelection
        disableSelectionOnClick
        className="data-grid"
      />
    </div> */}

     <Box className="medications-container">
      <Typography variant="h6" className="header">
        Medications
      </Typography>

      {/* Search Input */}
      <Box className="autocomplete-container">
        <TextField
          variant="outlined"
          placeholder="Search typing Medicines"
          fullWidth
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
        />
      </Box>

      {/* Frequently Prescribed Dropdown */}
      <Autocomplete
        options={filterMedications(frequentlyPrescribed)}
        getOptionLabel={(option) => option.label}
        renderOption={(props, option) => (
          <ListItem {...props} className="list-item">
            <Box className="pill-icon">Rx</Box>
            <ListItemText
              primary={option.label}
              secondary={option.subtitle}
            />
          </ListItem>
        )}
        renderInput={(params) => (
          <TextField {...params} label="Frequently Prescribed" />
        )}
        className="dropdown"
      />

      {/* Suggested Medications Dropdown */}
      <Autocomplete
        options={filterMedications(suggestedMedications)}
        getOptionLabel={(option) => option.label}
        renderOption={(props, option) => (
          <ListItem {...props} className="list-item">
            <Box className="pill-icon">Rx</Box>
            <ListItemText
              primary={option.label}
              secondary={option.subtitle}
            />
          </ListItem>
        )}
        renderInput={(params) => (
          <TextField {...params} label="Suggested Medications" />
        )}
        className="dropdown"
      />
    </Box>

    <Box className="medications-container">
      <Typography variant="h6" className="header">
        Medications
      </Typography>

      {/* Search Input */}
      <Box className="autocomplete-container">
        <TextField
          variant="outlined"
          placeholder="Search typing Medicines"
          fullWidth
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
        />
      </Box>

      {/* Combined Dropdown */}
      <Box className="dropdown">
        <Box className="dropdown-section">
          <Typography className="section-title">FREQUENTLY</Typography>
          <List className="medication-list">
            {filteredFrequently.map((item, index) => (
              <ListItem key={index} className="list-item">
                <Box className="pill-icon">Rx</Box>
                <ListItemText
                  primary={item.label}
                  secondary={item.subtitle}
                />
              </ListItem>
            ))}
          </List>
        </Box>

        <Box className="dropdown-section">
          <Typography className="section-title">SUGGESTED</Typography>
          <List className="medication-list">
            {filteredSuggested.map((item, index) => (
              <ListItem key={index} className="list-item">
                <Box className="pill-icon">Rx</Box>
                <ListItemText
                  primary={item.label}
                  secondary={item.subtitle}
                />
              </ListItem>
            ))}
          </List>
        </Box>
      </Box>
    </Box>

    <Box className="dropdown-container">
        {/* Frequently Section */}
        <Box className="dropdown-section frequently">
          <Box className="section-header">
            <Typography className="section-title">FREQUENTLY</Typography>
            <Typography className="section-subtitle">prescribed by you</Typography>
          </Box>
          <List className="medication-list">
            {filteredFrequently.map((item, index) => (
              <ListItem key={index} className="list-item">
                <Box className="pill-icon">Rx</Box>
                <ListItemText
                  primary={item.label}
                  secondary={item.subtitle}
                />
              </ListItem>
            ))}
          </List>
        </Box>

        {/* Suggested Section */}
        <Box className="dropdown-section suggested">
          <Box className="section-header">
            <Typography className="section-title">SUGGESTED</Typography>
            <Typography className="section-subtitle">
              for Symptoms/Diagnosis Entered
            </Typography>
          </Box>
          <List className="medication-list">
            {filteredSuggested.map((item, index) => (
              <ListItem key={index} className="list-item">
                <Box className="pill-icon">Rx</Box>
                <ListItemText
                  primary={item.label}
                  secondary={item.subtitle}
                />
              </ListItem>
            ))}
          </List>
        </Box>
      </Box>

      // <IconButton
// className="close-button"
// onClick={() => setIsDropdownOpen(false)}
// >
// <CloseIcon />
// </IconButton>

<Box className="medications-container" ref={dropdownRef}>
      <Typography variant="h6" className="header">
        Medications
      </Typography>

      {/* Search Input */}
      <Box className="search-container">
        <TextField
          variant="outlined"
          placeholder="Search typing Medicines"
          fullWidth
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          onFocus={() => setIsDropdownOpen(true)}
        />
      </Box>

      {/* Dropdown Content */}
      {isDropdownOpen && (
        <Box className="dropdown-container">
          {/* Frequently Section */}
          <Box className="dropdown-section frequently">
            <Box className="section-header">
              <Typography className="section-title">FREQUENTLY</Typography>
              <Typography className="section-subtitle">
                prescribed by you
              </Typography>
            </Box>
            <List className="medication-list">
              {filteredFrequently.map((item, index) => (
                <ListItem key={index} className="list-item">
                  <Box className="pill-icon">Rx</Box>
                  <ListItemText
                    primary={item.label}
                    secondary={item.subtitle}
                  />
                </ListItem>
              ))}
            </List>
          </Box>

          {/* Suggested Section */}
          <Box className="dropdown-section suggested">
            <Box className="section-header">
              <Typography className="section-title">SUGGESTED</Typography>
              <Typography className="section-subtitle">
                for Symptoms/Diagnosis Entered
              </Typography>
              
            </Box>
            <List className="medication-list">
              {filteredSuggested.map((item, index) => (
                <ListItem key={index} className="list-item">
                  <Box className="pill-icon">Rx</Box>
                  <ListItemText
                    primary={item.label}
                    secondary={item.subtitle}
                  />
                </ListItem>
              ))}
            </List>
          </Box>
        </Box>
      )}
    </Box>

     {/* <Box className="medications-container" ref={dropdownRef}>
      <Typography variant="h6" className="header">
        Medications
      </Typography>

      <Box className="search-container">
        <Autocomplete
          options={combinedOptions}
          getOptionLabel={(option) => `${option.label} (${option.subtitle})`}
          onChange={handleAutocompleteChange}
          renderInput={(params) => (
            <TextField
              {...params}
              variant="outlined"
              placeholder="Search typing Medicines"
              fullWidth
              onFocus={() => setIsDropdownOpen(true)}
            />
          )}
        />
      </Box>

      {isDropdownOpen && (
        <Box className="dropdown-container">
          <Typography className="section-title">Results</Typography>
          <List>
            {combinedOptions
              .filter((item) =>
                item.label.toLowerCase().includes(searchTerm.toLowerCase())
              )
              .map((item, index) => (
                <ListItem key={index} className="list-item">
                  <Box className="pill-icon">Rx</Box>
                  <ListItemText
                    primary={item.label}
                    secondary={item.subtitle}
                  />
                </ListItem>
              ))}
          </List>
        </Box>
      )}
    </Box> */}


    Fullscreen Icon 

  const [isFullscreen, setIsFullscreen] = useState(false);

      {/* <IconButton onClick={toggleFullscreen}>
          {isFullscreen ? <FullscreenExit /> : <Fullscreen />}
        </IconButton> */}

        // Toggle fullscreen mode
  const toggleFullscreen = () => {
    if (!isFullscreen) {
      if (containerRef.current.requestFullscreen) {
        containerRef.current.requestFullscreen();
      } else if (containerRef.current.webkitRequestFullscreen) {
        containerRef.current.webkitRequestFullscreen();
      } else if (containerRef.current.msRequestFullscreen) {
        containerRef.current.msRequestFullscreen();
      }
    } else {
      if (document.fullscreenElement || document.webkitFullscreenElement || document.msFullscreenElement) {
        if (document.exitFullscreen) {
          document.exitFullscreen();
        } else if (document.webkitExitFullscreen) {
          document.webkitExitFullscreen();
        } else if (document.msExitFullscreen) {
          document.msExitFullscreen();  
        }
      }
    }
    setIsFullscreen(!isFullscreen);
  };

Symptoms Autocomplete

 {/* <Box className="symptoms-container">
      <Typography variant="h6" className="title">
        Symptoms
      </Typography>
      <Autocomplete
        multiple
        options={symptoms}
        value={selectedSymptoms}
        onChange={(event, newValue) => setSelectedSymptoms(newValue)}
        renderInput={(params) => (
          <TextField
            {...params}
            variant="outlined"
            placeholder="Search typing Symptoms/Chief Complaints"
            className="search-input"
          />
        )}
        fullWidth
      />
    </Box> */}




    import React, { useState, useRef, useEffect } from "react";
import {
  TextField,
  List,
  ListItem,
  ListItemText,
  Typography,
  Box,
  Paper,
} from "@mui/material";
import "../Style/_symptoms.scss";

const frequentlyPrescribed = [
  "Zifi 200 Tablet",
  "Dolo",
  "Calpol",
  "Omez",
  "Pantop",
];

const suggestedMedications = [
  "Nitrocin Spray",
  "Sofromycin",
  "Paracetamol",
  "Dulcoflex",
  "Volini Spray",
];

const SearchSymptom = () => {
  const [searchTerm, setSearchTerm] = useState("");
  const [isDropdownOpen, setIsDropdownOpen] = useState(false);
  const dropdownRef = useRef(null);

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
        setIsDropdownOpen(false);
      }
    };

    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, []);

  const handleInputChange = (e) => {
    const value = e.target.value;
    setSearchTerm(value);
    setIsDropdownOpen(true);
  };

  const handleSelectMedication = (medication) => {
    setSearchTerm(medication);
    setIsDropdownOpen(false);
  };

  const filteredFrequently = frequentlyPrescribed.filter((med) =>
    med.toLowerCase().includes(searchTerm.toLowerCase())
  );
  const filteredSuggested = suggestedMedications.filter((med) =>
    med.toLowerCase().includes(searchTerm.toLowerCase())
  );

  return (
    <Box className="medications-container" ref={dropdownRef}>
      <Typography variant="h6" className="header">
        Medications
      </Typography>
      <Box className="search-container">
        <TextField
          variant="outlined"
          placeholder="Search typing Medicines"
          fullWidth
          value={searchTerm}
          onChange={handleInputChange}
          onFocus={() => setIsDropdownOpen(true)}
        />
      </Box>
      {isDropdownOpen && (
        <Box className="dropdown-container" style={{ display: "flex" }}>
          {/* Frequently Section */}
          <Box className="dropdown-section" style={{ flex: 1, marginRight: "10px" }}>
            <Typography className="section-title">FREQUENTLY</Typography>
            <List className="medication-list">
              {filteredFrequently.map((med, index) => (
                <ListItem
                  key={index}
                  className="list-item"
                  onClick={() => handleSelectMedication(med)}
                  style={{ cursor: "pointer" }}
                >
                  <Box className="pill-icon">Rx</Box>
                  <ListItemText primary={med} />
                </ListItem>
              ))}
            </List>
          </Box>
          {/* Suggested Section */}
          <Box className="dropdown-section" style={{ flex: 1 }}>
            <Typography className="section-title">SUGGESTED</Typography>
            <List className="medication-list">
              {filteredSuggested.map((med, index) => (
                <ListItem
                  key={index}
                  className="list-item"
                  onClick={() => handleSelectMedication(med)}
                  style={{ cursor: "pointer" }}
                >
                  <Box className="pill-icon">Rx</Box>
                  <ListItemText primary={med} />
                </ListItem>
              ))}
            </List>
          </Box>
        </Box>
      )}
    </Box>
  );
};

export default SearchSymptom;


// const frequentlyPrescribed = [
//   "Zifi 200 Tablet",
//   "Dolo",
//   "Calpol",
//   "Omez",
//   "Pantop",
// ];

// const suggestedMedications = [
//   "Nitrocin Spray",
//   "Sofromycin",
//   "Paracetamol",
//   "Dulcoflex",
//   "Volini Spray",
// ];